/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    api 'org.slf4j:slf4j-api:1.7.25'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testImplementation 'junit:junit:4.12'
}
*/

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
			srcDir 'src-dbtransfer'
			//srcDir 'src-launcher'
		}
		resources {
			srcDirs 'src/main/resources'
		}


	}
	test {
		java {
			srcDir 'src/test/java'
		}
		resources {
			srcDir 'src/test/java' exclude '**/*.java'
			srcDir 'src/test/resources' exclude '**/*.java'
		}

	}
}

dependencies {
	testImplementation 'junit:junit:4.12'
	//采用log4j2记录日志

	api(
			[group: 'com.bbossgroups', name: 'bboss-persistent', version: "${bboss_version}", transitive: true],
	)
	api 'mysql:mysql-connector-java:8.0.33'
	api (
			fileTree(dir: 'lib', include: '**/*.jar')
	)
	runtimeOnly(
			[group: 'com.bbossgroups', name: 'bboss-bootstrap-rt', version: "${bboss_version}", transitive: true],
	)
	api 'org.apache.ant:ant:1.7.0'
	api 'org.apache.velocity:velocity:1.5'
	api 'org.apache.texen:texen:1.0'
	api 'org.apache.torque:village:3.3'
	api 'xerces:xercesImpl:2.12.2'
	api 'xml-apis:xml-apis:2.0.2'
}

task copyJarFiles(type: Sync,dependsOn:'jar'){



	from configurations.api{
		canBeResolved=true

	}
	from jar.outputs
	exclude { details -> details.file.name.startsWith('bboss-rt')  }
	into 'build/dist/lib'

}

task copyRTJarFiles(type: Copy,dependsOn:'copyJarFiles'){
	from configurations.runtimeOnly{
		canBeResolved=true

	} - configurations.api{
		canBeResolved=true

	}
	into 'build/dist'
	include { details -> details.file.name.startsWith('bboss-rt')  }
	rename ("bboss-rt-${bboss_version}.jar", "${project.name}-boot-${bboss_version}.jar")
}
task copyToolFiles(type: Copy ,dependsOn:'copyRTJarFiles')  {
	from ('runfiles')
			{
				expand(
						bboss_version:"${bboss_version}",
						project:"${project.name}"
				)

			}
	filteringCharset = 'UTF-8'
	into 'build/dist/'



}
task copyResourcesfiles(type: Sync )  {
	from fileTree(dir: 'src/test/resources')
	filteringCharset = 'UTF-8'
	into 'build/dist/resources'
}
task copyTemplatesfiles(type: Sync )  {
	from fileTree(file('templates'))
	filteringCharset = 'UTF-8'
	into 'build/dist/templates'
}
task copyAllSchemasfiles(type: Sync )  {
	from fileTree(file('schema')){
		include '**/*.xml'
	}
	from fileTree(file('schema-assemble/system'))
	filteringCharset = 'UTF-8'
	into 'build/dist/schema'
}
task copySchemasfiles(type: Sync )  {
	from fileTree(file('schema')){
		include '**/cms.xml'
		include '**/sys.xml'
		include '**/tableinfo.xml'
		include '**/test.xml'
	}
	from fileTree(file('schema-assemble/system'))
	filteringCharset = 'UTF-8'
	into 'build/dist/schema'
}


task copyIndexsfiles(type: Sync )  {
	from fileTree(file( 'schema/index')){
		include '*.xml'

	}
	filteringCharset = 'UTF-8'
	into 'build/dist/schema/index'
}

task copyPatchsfiles(type: Sync )  {
	from fileTree(file('schema/patch')){
		include '*.xml'

	}
	filteringCharset = 'UTF-8'
	into 'build/dist/schema/patch'
}

task copyDatasfiles(type: Sync )  {
	from fileTree(file('schema/data')){
		include '**/cmc-init.xml'
		include '**/mysql-sequence.xml'
		include '**/sys-init.xml'
		include '**/cms-init.xml'
		include '**/cms-init-1.xml'

	}
	filteringCharset = 'UTF-8'
	into 'build/dist/schema/data'
}

task copyAllDatasfiles(type: Sync )  {
	from fileTree(file('schema/data')){
		include '**/*.xml'

	}
	filteringCharset = 'UTF-8'
	into 'build/dist/schema/data'
}

task releaseSystemVersion(type: Zip,dependsOn:['copyToolFiles','copyResourcesfiles',
										 'copyTemplatesfiles',
										 'copySchemasfiles','copyIndexsfiles','copyPatchsfiles','copyDatasfiles']) {

	//appendix = 'wrapper'
	classifier = 'released'
	from 'build/dist/'

}

task releaseVersion(type: Zip,dependsOn:['copyToolFiles', 'copyResourcesfiles',
											   'copyTemplatesfiles',
											   'copyAllSchemasfiles', 'copyIndexsfiles', 'copyPatchsfiles', 'copyAllDatasfiles']) {

	//appendix = 'wrapper'
	classifier = 'released'
	from 'build/dist/'

}
